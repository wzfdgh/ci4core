name: Automatic core compression
on:
  schedule:
    - cron: 0 15 * * *
  workflow_dispatch:
    inputs:
      forcerun:
        type: boolean
        description: Forcing a workflow
        default: false
        required: true
  push:
    branches:
      - main
    paths:
      - .github/workflows/ci.yml

env:
  download_tag: Prerelease-Alpha
  download_version: ''
  name: mihomo
  download_url: https://github.com/MetaCubeX/mihomo/releases/download

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Alpha:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.status }}
    strategy:
      matrix:
       jobs:
          # - { os: darwin, arch: arm64, rname: '' }
          # - { os: darwin, arch: amd64-compatible, rname: '' }
          # - { os: darwin, arch: amd64, rname: '' }

          # - { os: linux, arch: '386', rname: '' }
          - { os: linux, arch: amd64-compatible, rname: '' }
          - { os: linux, arch: amd64, rname: '' }
          - { os: linux, arch: arm64, rname: '' }
          # - { os: linux, arch: armv5, rname: '' }
          # - { os: linux, arch: armv6, rname: '' }
          - { os: linux, arch: armv7, rname: '' }
          # - { os: linux, arch: mips-hardfloat, rname: '' }
          # - { os: linux, arch: mips-softfloat, rname: '' }
          # - { os: linux, arch: mipsle-hardfloat, rname: '' }
          # - { os: linux, arch: mipsle-softfloat, rname: '' }
          # - { os: linux, arch: mips64, rname: '' }
          # - { os: linux, arch: mips64le, rname: '' }
          # - { os: linux, arch: loong64-abi1, rname: '' }
          # - { os: linux, arch: loong64-abi2, rname: '' }
          # - { os: linux, arch: riscv64, rname: '' }
          # - { os: linux, arch: s390x, rname: '' }

          # - { os: windows, arch: '386', rname: '' }
          - { os: windows, arch: amd64-compatible, rname: '' }
          - { os: windows, arch: amd64, rname: '' }
          # - { os: windows, arch: armv7, rname: '' }
          # - { os: windows, arch: arm64, rname: '' }

          # - { os: freebsd, arch: '386', rname: '' }
          # - { os: freebsd, arch: amd64-compatible, rname: '' }
          # - { os: freebsd, arch: amd64, rname: '' }
          # - { os: freebsd, arch: arm64, rname: '' }

          # - { os: android, arch: '386', rname: '' }
          # - { os: android, arch: amd64, rname: '' }
          # - { os: android, arch: armv7, rname: '' }
          - { os: android, arch: arm64-v8, rname: 'arm64' }

          # https://github.com/MetaCubeX/mihomo/blob/Alpha/.github/workflows/build.yml#L32-L68
          
          # Go 1.22 with special patch can work on Windows 7
          # https://github.com/MetaCubeX/go/commits/release-branch.go1.22/
          # - { os: windows, arch: '386-go122', rname: '' }
          # - { os: windows, arch: amd64-compatible-go122, rname: '' }
          # - { os: windows, arch: amd64-go122, rname: '' }

          # Go 1.21 can revert commit `9e4385` to work on Windows 7
          # https://github.com/golang/go/issues/64622#issuecomment-1847475161
          # (OR we can just use golang1.21.4 which unneeded any patch)
          # - { os: windows, arch: '386-go121', rname: '' }
          # - { os: windows, arch: amd64-compatible-go121, rname: '' }
          # - { os: windows, arch: amd64-go121, rname: '' }

          # Go 1.20 is the last release that will run on any release of Windows 7, 8, Server 2008 and Server 2012. Go 1.21 will require at least Windows 10 or Server 2016.
          # - { os: windows, arch: '386-go120', rname: '' }
          # - { os: windows, arch: amd64-compatible-go120, rname: '' }
          # - { os: windows, arch: amd64-go120, rname: '' }

          # Go 1.22 is the last release that will run on macOS 10.15 Catalina. Go 1.23 will require macOS 11 Big Sur or later.
          # - { os: darwin, arch: arm64-go122, rname: '' }
          # - { os: darwin, arch: amd64-compatible-go122, rname: '' }
          # - { os: darwin, arch: amd64-go122, rname: '' }

          # Go 1.20 is the last release that will run on macOS 10.13 High Sierra or 10.14 Mojave. Go 1.21 will require macOS 10.15 Catalina or later.
          # - { os: darwin, arch: arm64-go120, rname: '' }
          # - { os: darwin, arch: amd64-compatible-go120, rname: '' }
          # - { os: darwin, arch: amd64-go120, rname: '' }

          # only for test
          # - { os: linux, arch: '386-go120', rname: '' }
          # - { os: linux, arch: amd64-compatible-go120, rname: '' }
          # - { os: linux, arch: amd64-go120, rname: '' }

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: check
        run: |
          if [ "${download_tag}" = "Prerelease-Alpha" ] || [ "${download_tag}" = "Prerelease-Beta" ];then
            download_version=$(curl -sSL ${download_url}/Prerelease-Alpha/version.txt)
          else
            download_version=${download_tag}
          fi
          echo "download_version=${download_version}" >> $GITHUB_ENV
          if [ "${{ inputs.forcerun }}" != 'true' ] && [ "$(curl -sSL https://api.github.com/repos/wzfdgh/ClashRepo/releases/latest | awk -F '=' '/body/ {split($2, v, " "); print v[1]}')" = "${download_version}" ];then
             echo "status=cancel" >> $GITHUB_OUTPUT
          fi

      - name: Download upx
        if: steps.check.outputs.status != 'cancel'
        run: |
          upx_tag=$(curl -sSL https://api.github.com/repos/upx/upx/releases/latest | awk -F '"' '/tag_name/ {print $4}')
          upx_version=$(curl -sSL https://api.github.com/repos/upx/upx/releases/latest | awk -F '"' '/tag_name/ {print $4}' | awk -F 'v' '{print $2}')
          echo "upx_tag=${upx_tag}" >> ${GITHUB_ENV} && echo "upx_version=${upx_version}" >> ${GITHUB_ENV}
          wget https://github.com/upx/upx/releases/download/${upx_tag}/upx-${upx_version}-amd64_linux.tar.xz -O - | tar -Jx
          wget https://github.com/wzfdgh/ci4core/raw/upx/upx-3.95-amd64_linux.tar.xz -O - | tar -Jx
          # wget https://github.com/wzfdgh/ci4core/raw/upx/upx-3.93-amd64_linux.tar.xz -O - | tar -Jx

      - name: Core
        if: steps.check.outputs.status != 'cancel'
        run: |
          mkdir -p publish
          if [ "${{matrix.jobs.os}}" = "windows" ]; then
            wget ${download_url}/${download_tag}/${name}-windows-${{matrix.jobs.arch}}-${download_version}.zip
            unzip -o ${name}-windows-${{matrix.jobs.arch}}-${download_version}.zip
            mv ${name}-windows-${{matrix.jobs.arch}}.exe ./publish/clash.meta-windows-${{matrix.jobs.arch}}.exe
            chmod +x ./publish/clash.meta-windows-${{matrix.jobs.arch}}.exe
            if [[ "${{matrix.jobs.arch}}" = mips* ]];then
              ./upx-3.93-amd64_linux/upx ./publish/clash.meta-windows-${{matrix.jobs.arch}}.exe
            else
              ./upx-${upx_version}-amd64_linux/upx ./publish/clash.meta-windows-${{matrix.jobs.arch}}.exe
            fi
            if [ "${{matrix.jobs.rname}}" != '' ];then
              mv ./publish/clash.meta-windows-${{matrix.jobs.arch}}.exe ./publish/clash.meta-windows-${{matrix.jobs.rname}}.exe
            fi
          else
            wget ${download_url}/${download_tag}/${name}-${{matrix.jobs.os}}-${{matrix.jobs.arch}}-${download_version}.gz -O - | gunzip -c > ./publish/clash.meta-${{matrix.jobs.os}}-${{matrix.jobs.arch}}
            chmod +x ./publish/clash.meta-${{matrix.jobs.os}}-${{matrix.jobs.arch}}
            if [ "${{matrix.jobs.arch}}" != "armv5" ];then
              if [[ "${{matrix.jobs.arch}}" = mips* ]];then
                ./upx-3.93-amd64_linux/upx ./publish/clash.meta-${{matrix.jobs.os}}-${{matrix.jobs.arch}}
              else
                ./upx-${upx_version}-amd64_linux/upx ./publish/clash.meta-${{matrix.jobs.os}}-${{matrix.jobs.arch}}
              fi
            fi
            if [ "${{matrix.jobs.rname}}" != '' ];then
              mv ./publish/clash.meta-${{matrix.jobs.os}}-${{matrix.jobs.arch}} ./publish/clash.meta-${{matrix.jobs.os}}-${{matrix.jobs.rname}}
            fi
          fi
          echo -n "Core=${download_version} Time=`TZ='Asia/Shanghai' date "+%F %R %z"`" > ./publish/body.txt

      - name: Archive production artifacts
        if: steps.check.outputs.status != 'cancel'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.jobs.os }}-${{ matrix.jobs.arch }}
          path: ./publish/*

  Release:
    needs: [Alpha]
    if: needs.Alpha.outputs.status != 'cancel'
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v4
        with:
          path: publish
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: publish

      - name: Git push assets to "release" branch
        run: |
          mv ./publish/body.txt .
          cd publish || exit 1
          git init
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout -b release
          git add .
          git commit -m release
          git remote add origin "https://${{ github.actor }}:${{ secrets.github_token }}@github.com/${{ github.repository }}"
          git push -f -u origin release

      - name: Delete current release assets
        uses: andreaswilli/delete-release-assets-action@v4.0.0
        with:
          github_token: ${{ secrets.github_token }}
          tag: latest
          deleteOnlyFromDrafts: false

      - name: Upload Release
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: latest
          files: ./publish/*
          generate_release_notes: true
          body_path: body.txt
